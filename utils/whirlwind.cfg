#textdomain wesnoth-loti

#define WEAPON_SPECIAL_WHIRLWIND
    [attacks]
        id=whirlwind
        name="whirlwind"
        name_inactive="whirlwind"
        description= _ "When this attack is used, all enemies adjacent the attacker take the damage and the enemy cannot retaliate. the unit will recieve experience for killing non-targeted units."
        description_inactive= _ "When this attack is used, all enemies adjacent the attacker take the damage and the enemy cannot retaliate. the unit will recieve experience for killing non-targeted units."
        value=0
        apply_to=opponent
    [/attacks]
#enddef

#define WEAPON_SPECIAL_LIFE_CONSUMER
    [dummy]
        id=weapon_life_consumer
        name= _ "life consumer"
        name_inactive= _ "life consumer"
        description= _ "The power needed for this attack is so great that it causes the unit to lose 16 hp, and even cause its death if its life reaches 0 or below."
        description_inactive= _ "The power needed for this attack is so great that it causes the unit to lose 16 hp, and even cause its death if its life reaches 0 or below."
        apply_to=self
    [/dummy]
#enddef


#define SPECIAL_NOTES_LIFE_CONSUMER
_ "The power needed for this attack is so great that it causes the unit to lose 16 hp, and even cause its death if its life reaches 0 or below."#enddef


#define WEAPON_SPECIAL_LESSER_LIFE_CONSUMER
    [dummy]
        id=weapon_lesser_life_consumer
        name= _ "lesser life consumer"
        name_inactive= _ "lesser life consumer"
        description= _ "The power needed for this attack is so great that it causes the unit to lose 8 hp, but never killing it."
        description_inactive= _ "The power needed for this attack is so great that it causes the unit to lose 8 hp, but never killing it."
        apply_to=self
    [/dummy]
#enddef

#define SPECIAL_NOTES_ATTACK_ONLY
    _ " Some of this unit's attacks are not available except on offence." #enddef

#define WEAPON_SPECIAL_ATTACK_ONLY
    [damage]
        id=attack_only
        name= _ "attack only"
        name_inactive= _ "attack only"
        description= _ "This weapon will never be used on defence. On defence this weapon is removed as an option."
        description_inactive= _ "This weapon will never be used on defence. On defence this weapon is removed as an option."
        multiply=0
        active_on=defense
    [/damage]
    [/specials]
    defense_weight=0
    [+specials]
#enddef

#define SPECIAL_NOTES_DEFEND_ONLY
    _ " Some of this unit's attacks are not available except on defence." #enddef

#define WEAPON_SPECIAL_DEFEND_ONLY
    [damage]
        id=defend_only
        name= _ "defend only"
        name_inactive= _ "defend only"
        description= _ "This weapon will only be available for defence. On offence this weapon is removed as an option."
        description_inactive= _ "This weapon will only be available for defence. On offence this weapon is removed as an option."
        multiply=0
        active_on=offense
    [/damage]
    [/specials]
    attack_weight=0
    [+specials]
#enddef

#define WEAPON_SPECIAL_MOVEMENT_USED VALUE
#dummy special to indicate the presense of changed movement cost for attacks
    [dummy]
        id=movement used
        name="movement used ({VALUE})"
        description="This weapon only wastes {VALUE} mp, instead of full."
    [/dummy]
#enddef
 

#Leech

#define WEAPON_SPECIAL_LEECH
    [damage]
        id=leeches
        name= _ "leeches"
        description= _ "This is similar to the drains ability, but it drains only 1/10 of the damage inflicted but it can leech also the magic bound in the undeath of non-living foes."
    [/damage]
#enddef

#define LEECH_EVENT

[event]
    name=attacker hits
    first_time_only=no
   
    [filter_attack]
        special=leeches
    [/filter_attack]
	[set_variable]
	name=damage_dealt
	value=$damage_inflicted
	[/set_variable]
	[set_variable]
	name=damage_dealt
	divide=10
	round=ceil
	[/set_variable]
	{VARIABLE_OP unit.hitpoints add $damage_dealt}
	    [if]
		[variable]
		    name=unit.hitpoints
		    greater_than=$unit.max_hitpoints
		[/variable]
		[then]
		    {VARIABLE unit.hitpoints $unit.max_hitpoints}
		[/then]
	    [/if]
	[unstore_unit]
                variable=unit
                find_vacant=no
		{COLOR_HEAL}
		text= _ "$damage_dealt"
        [/unstore_unit]
        {CLEAR_VARIABLE damage_dealt}
[/event]
[event]
    name=defender hits
    first_time_only=no
    [filter_second_attack]
        special=leeches
    [/filter_second_attack]
	[set_variable]
	name=damage_dealt
	value=$damage_inflicted
	[/set_variable]
	[set_variable]
	name=damage_dealt
	divide=10
	round=ceil
	[/set_variable]
	{VARIABLE_OP second_unit.hitpoints add $damage_dealt}
	    [if]
		[variable]
		    name=second_unit.hitpoints
		    greater_than=$second_unit.max_hitpoints
		[/variable]
		[then]
		    {VARIABLE second_unit.hitpoints $second_unit.max_hitpoints}
		[/then]
	    [/if]
	[unstore_unit]
                variable=second_unit
                find_vacant=no
		{COLOR_HEAL}
		text= _ "$damage_dealt"
        [/unstore_unit]	
{CLEAR_VARIABLE damage_dealt}
[/event]
#enddef

#define WHIRLWIND_EVENT
    [event]
        name=attacker hits
        first_time_only=no
        [filter_attack]
            special=whirlwind
        [/filter_attack]
        {WHIRLWIND_CHECK}
    [/event]
#enddef
#define WHIRLWIND_CHECK
        {VARIABLE has_leech 0}
        {VARIABLE has_drain 0}
        {VARIABLE has_slow no}
        {VARIABLE has_poison no}
        {FOREACH weapon.specials.damage i}
            [if]
                [variable]
                    name=weapon.specials.damage[$i].id
                    equals=leeches
                [/variable]
                [then]
                    {VARIABLE has_leech yes}
                [/then]
            [/if]
        {NEXT i}
        [if]
            [variable]
                name=weapon.specials.drains.id
                equals=drains
            [/variable]
            [then]
                {VARIABLE has_drain yes}
            [/then]
        [/if]
        [if]
            [variable]
                name=weapon.specials.poison.id
                equals=poison
            [/variable]
            [then]
                {VARIABLE has_poison yes}
            [/then]
        [/if]
        [if]
            [variable]
                name=weapon.specials.slow.id
                equals=slow
            [/variable]
            [then]
                {VARIABLE has_slow yes}
            [/then]
        [/if]
#{DEBUG "Whirlwind Hit: dmg $damage  leech $has_leech  poison $has_poison  drain $has_drain  slow $has_slow"}
        [if]
            [variable]
                name=has_leech
                not_equals=0
            [/variable]
            [or]
                [variable]
                    name=has_drain
                    not_equals=0
                [/variable]
            [/or]
            [then]
                [store_unit]    # We need to know how many units were hit, and what were their resistances
                    [filter]
                        [filter_adjacent]
                            x,y=$x1,$y1
                        [/filter_adjacent]
                        [not]
                            x,y=$x2,$y2
                        [/not]
                        [filter_side]
                            [enemy_of]
                                side=$unit.side
                            [/enemy_of]
                        [/filter_side]
                    [/filter]
                    variable=units
                [/store_unit]
                {VARIABLE damage_to_leech 0}
                {VARIABLE damage_to_drain 0}
                {FOREACH units i}
                    [get_unit_resistance]
                        find_in=units[$i]
                        damage_type=$weapon.type
                        to_variable=secondary_resistance
                    [/get_unit_resistance]
                    [if]
                        [variable]
                            name=secondary_resistance
                            less_than=0
                        [/variable]
                        [then]
                            {VARIABLE secondary_resistance 100}
                        [/then]
                    [/if]
                    {VARIABLE secondary_damage $weapon.damage}
                    {VARIABLE_OP secondary_damage multiply $secondary_resistance}
                    [if]
                        [variable]
                            name=secondary_damage
                            greater_than=$($units[$i].hitpoints*100)
                        [/variable]
                        [then]
                            {VARIABLE true_damage $units[$i].hitpoints}
                            {VARIABLE_OP true_damage multiply 100}
                        [/then]
                        [else]
                            {VARIABLE true_damage $secondary_damage}
                        [/else]
                    [/if]
                    # Note: Damage that is too small to leech can be combined from multiple targets into a real hitpoint.
                    # Example: 4 damage to 3 targets. Each hit alone produces 0 leech gain, but all 3 together get 1 hitpoint.
                    [if]
                        [variable]
                            name=has_leech
                            not_equals=0
                        [/variable]
                        [then]
                            {VARIABLE_OP damage_to_leech add $true_damage}
                        [/then]
                    [/if]
                    # Drain
                    [if]
                        [variable]
                            name=units[$i].status.not_living
                            not_equals=yes
                        [/variable]
                    [and]
                        [variable]
                            name=has_drain
                            not_equals=0
                        [/variable]
                    [/and]
                        [then]
                            {VARIABLE_OP damage_to_drain add $true_damage}
                        [/then]
                    [/if]
#{DEBUG "Whirl loop unit at $units[$i].x,$units[$i].y  Resist $secondary_resistance  secD $secondary_damage  trueD $true_damage  damage_to_leech $damage_to_leech  damage_to_drain $damage_to_drain"}
                    {CLEAR_VARIABLE secondary_resistance,secondary_damage,true_damage}
                {NEXT i}
                [if]
                    [variable]
                        name=has_leech
                        not_equals=0
                    [/variable]
                    [then]
                        {VARIABLE healed_amount $damage_to_leech}
                        # Divide by 100 to rescale, then 10% leech factor
                        {VARIABLE_OP healed_amount divide 1000}
                        {VARIABLE_OP healed_amount round 0}
#{DEBUG "LeechAddition $damage_to_leech  real heal $healed_amount"}
                        [heal_unit]
                            [filter]
                                x,y=$x1,$y1
                            [/filter]
                            amount=$healed_amount
                            animate=yes
                            restore_statuses=no
                        [/heal_unit]
                        {CLEAR_VARIABLE healed_amount}
                    [/then]
                [/if]
                [if]
                    [variable]
                        name=has_drain
                        not_equals=0
                    [/variable]
                    [then]
                        {VARIABLE healed_amount $damage_to_drain}
                        # Divide by 100 to rescale, then 50% drain factor
                        {VARIABLE_OP healed_amount divide 200}
                        {VARIABLE_OP healed_amount round 0}
#{DEBUG "DrainAddition $damage_to_drain  real heal $healed_amount"}
                        [heal_unit]
                            [filter]
                                x,y=$x1,$y1
                            [/filter]
                            amount=$healed_amount
                            animate=yes
                            restore_statuses=no
                        [/heal_unit]
                        {CLEAR_VARIABLE healed_amount}
                    [/then]
                [/if]
                {CLEAR_VARIABLE units}
                {CLEAR_VARIABLE damage_to_leech,damage_to_drain,healed_amount}
            [/then]
        [/if]
        [harm_unit]
            [filter]
                [filter_adjacent]
                    x,y=$x1,$y1
                [/filter_adjacent]
                [not]
                    x,y=$x2,$y2
                [/not]
                [filter_side]
                    [enemy_of]
                        side=$unit.side
                    [/enemy_of]
                [/filter_side]
            [/filter]
            [filter_second]
                x,y=$x1,$y1
            [/filter_second]
            amount=$weapon.damage
            alignment=$unit.alignment
            damage_type=$weapon.type
            experience=yes
            fire_event=yes
            poisoned=$has_poison
            slowed=$has_slow
#	    animate=yes
        [/harm_unit] 
	[unstore_unit]
                variable=attacker
                find_vacant=no
        [/unstore_unit]	
        {CLEAR_VARIABLE has_slow}
        {CLEAR_VARIABLE has_poison}
        {CLEAR_VARIABLE has_leech}
        {CLEAR_VARIABLE has_drain,damage}
#enddef
