#textdomain wesnoth-help 
#define WEAPON_SPECIAL_GREATER_MARKSMAN
    # Canned definition of the Greater Marksman ability to be included in a
    # [specials] clause.
    [chance_to_hit]
        id=greater_marksman
        name= _ "greater marksman"
        description= _ "When used offensively, this attack always has at least a 70% chance to hit."
        value=70
        cumulative=yes
        active_on=offense
    [/chance_to_hit]
#enddef
#define WEAPON_SPECIAL_LESSER_MARKSMAN
    # Canned definition of the Lesser Marksman ability to be included in a
    # [specials] clause.
    [chance_to_hit]
        id=lesser_marksman
        name= _ "lesser marksman"
        description= _ "When used offensively, this attack always has at least a 50% chance to hit."
        value=50
        cumulative=yes
        active_on=offense
    [/chance_to_hit]
#enddef
#define WEAPON_SPECIAL_FOCUSED
    # Canned definition of the Focused ability to be included in a
    # [specials] clause.
    [chance_to_hit]
        id=focused
        name= _ "focused"
        description= _ "this attack always has at least a 80% chance to hit."
        value=80
        cumulative=yes
    [/chance_to_hit]
#enddef
#define WEAPON_SPECIAL_SHOCK
    # Canned definition of the Shock ability to be included in a
    # [specials] clause.
    [attacks]
        id=shock
        name= _ "shock"
        name_inactive= _ "shock"
        description="When this attack is used on offense, the opponent will retaliate with one less strike than normally, to a minimum of one strike."
        description_inactive="When this attack is used on offense, the opponent will retaliate with one less strike than normally, to a minimum of one strike."
        add=-1
        active_on=offense
        apply_to=opponent
        [filter_base_value]
            greater_than=1
        [/filter_base_value]
    [/attacks]
#enddef
#define WEAPON_SPECIAL_PARALYZED
    # Canned definition of the Paralyzed ability to be included in a
    # [specials] clause.
    [attacks]
        id=paralyzed
        name= _ "paralyzed"
        name_inactive= _ "paralyzed"
        description="the unit will have 0 attacks while."
        description_inactive="When this attack is used on offense, the opponent will retaliate with one less strike than normally, to a minimum of one strike."
        value=0
        apply_to=self
    [/attacks]
#enddef
#define WEAPON_SPECIAL_NO_COUNTER
    [attacks]
        id=no_counter
        name= _ "no counter-attack"
        description=_"The opponent has a 0% chance to hit, when this unit is attacking. Does not work on opponents with berserker frenzy."
        name_inactive= _ "no counter-attack"
        description_inactive=_"The opponent has a 0% chance to hit, when this unit is attacking. Does not work on opponents with berserker frenzy."
        value=0
        cumulative=no
        active_on=offense
        apply_to=opponent

        # TODO: cover weapons with berserk in a better way, perhaps
        [filter_opponent]
            [not]
                has_weapon=berserker frenzy
            [/not]
        [/filter_opponent]
    [/attacks]
#enddef
#define WEAPON_SPECIAL_NO_COUNTER
    [attacks]
        id=no_counter
        name= _ "no counter"
        name_inactive= _ "no counter"
        description= _ "This attack has such a large range, that the enemy cannot retaliate."# if the defender's weapon has this trait too, the fight will be as usual."
        description_inactive= _ "This attack has such a large range, that the enemy cannot retaliate."# if the defender's weapon has this trait too, the fight will be as usual."
        value=0
        apply_to=opponent
        active_on=offense
#     [filter]
#           [not]
#        [filter_second]
#            [filter_weapon]
#               special=distant_attack
#            [/filter_weapon]
#        [/filter_second]
#           [/not]
#     [/filter]
    [/attacks]
#enddef
#define WEAPON_SPECIAL_DISTANT_ATTACK NUMBER
    [chance_to_hit]
        id=distant_attack
        name= _ "distant attack"
        name_inactive= _ "distant attack"
        description= _ "This attack has a large range, and thus the enemies can barely see it, having their aim drop in retaliation by {NUMBER}%."# if the defender's weapon has this trait too, the fight will be as usual."
        description_inactive= _ "This attack has a large range, and thus the enemies can barely see it, having their aim drop in retaliation by {NUMBER}%."# if the defender's weapon has this trait too, the fight will be as usual."
        add=-{NUMBER}
        active_on=offense
        apply_to=opponent
        [filter_base_value]
            greater_than=30
        [/filter_base_value]
    [/chance_to_hit]
#enddef
#define WEAPON_SPECIAL_BERSERK_OFFENSE
    # Canned definition of the Berserk ability to be included in a
    # [specials] clause.
    [berserk]
        id=berserk
        name= _ "berserk"
        description= _ "Whether used offensively, this attack presses the engagement until one of the combatants is slain, or 30 rounds of attacks have occurred."
        active_on=offense
        value=30
    [/berserk]
#enddef
#define WEAPON_SPECIAL_LOOT

	    # Canned definition of the loot ability to be included in a
	    # [specials] clause.

	    [damage]
	        id=weapon_loot
	        name= _ "loot"
	        name_inactive= _ "loot"
	        description= _ "With each successful strike this unit steals gold from your opponent and gives it to you."
	        description_inactive= _ "With each successful strike this unit steals gold from your opponent and gives it to you."
	        apply_to=opponent
	    [/damage]
	[/specials]
[/attack]
# event that creates a "loot has worked" variable
# and sets it to "yes" if the attacker hits at least once.
[event]
    name=attacker_hits
    first_time_only=no
    [filter_attack]
        special=weapon_loot
    [/filter_attack]
    [store_unit]
        [filter]
            x,y=$x1,$y1
        [/filter]
        variable=unit_att_with_loot
        mode=append
    [/store_unit]
    [set_variable]
        name=unit_att_with_loot.variables.loot_has_worked
        value=yes
    [/set_variable]
    [unstore_unit]
        variable=unit_att_with_loot
    [/unstore_unit]
    {CLEAR_VARIABLE unit_att_with_loot}
[/event]
[event]
    name=attacker_hits
    first_time_only=no
    [filter_attack]
        special=weapon_loot
    [/filter_attack]
    [store_unit]
        [filter]
            x,y=$x1,$y1
        [/filter]
        variable=looter
        mode=append
    [/store_unit]
    [store_unit]
        [filter]
            x,y=$x2,$y2
        [/filter]
        variable=looted
        mode=append
    [/store_unit]
    [if]
        [variable]
            name=looter.variables.loot_has_worked
            equals=yes
        [/variable]
#randomize the stolen gold		
		[then]
			{VARIABLE_OP hit rand (0,0,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,4,4,5)}
			[if]
				{VARIABLE_CONDITIONAL hit equals 1}
				[then]
					[gold]
						side=$unit.side
						amount=1
					[/gold]
					[gold]
						side=$second_unit.side
						amount=-1
					[/gold]
					[sound]
						name=gold.ogg
					[/sound]
					[unstore_unit]
						variable=looted
						text="<span color='#cccc33'>" + _ "1g" + "</span>"
					[/unstore_unit]
				[/then]
			[/if]
			[if]
				{VARIABLE_CONDITIONAL hit equals 2}
				[then]
				[gold]
					side=$unit.side
					amount=2
				[/gold]
				[gold]
					side=$second_unit.side
					amount=-2
				[/gold]
				[sound]
					name=gold.ogg
				[/sound]
				[unstore_unit]
					variable=looted
					text="<span color='#cccc33'>" + _ "2g" + "</span>"
				[/unstore_unit]
				[/then]
			[/if]
			[if]
				{VARIABLE_CONDITIONAL hit equals 3}
				[then]
				[gold]
					side=$unit.side
					amount=3
				[/gold]
				[gold]
					side=$second_unit.side
					amount=-3
				[/gold]
				[sound]
					name=gold.ogg
				[/sound]
				[unstore_unit]
					variable=looted
					text="<span color='#cccc33'>" + _ "3g" + "</span>"
				[/unstore_unit]
				[/then]
			[/if]
			[if]
				{VARIABLE_CONDITIONAL hit equals 4}
				[then]
				[gold]
					side=$unit.side
					amount=4
				[/gold]
				[gold]
					side=$second_unit.side
					amount=-4
				[/gold]
				[sound]
					name=gold.ogg
				[/sound]
				[unstore_unit]
					variable=looted
					text="<span color='#cccc33'>" + _ "4g" + "</span>"
				[/unstore_unit]
				[/then]
			[/if]
			[if]
				{VARIABLE_CONDITIONAL hit equals 5}
				[then]
				[gold]
					side=$unit.side
					amount=5
				[/gold]
				[gold]
					side=$second_unit.side
					amount=-5
				[/gold]
				[sound]
					name=gold.ogg
				[/sound]
				[unstore_unit]
					variable=looted
					text="<span color='#cccc33'>" + _ "5g" + "</span>"
				[/unstore_unit]
				[/then]
			[/if]
        [/then]
    [/if]
    {CLEAR_VARIABLE looter}
    {CLEAR_VARIABLE looted}
[/event]
[+attack]
[+specials]
#enddef
#define WEAPON_SPECIAL_THUNDERBOLT NUMBER
[dummy]
	id=thunderbolt
	name= _ "thunderbolt ({NUMBER})"
	description=_ "Every time this unit attacks with this weapon there is a 25% chance the weapon will call down a thunderbolt from the sky. The thunderbolt deals {NUMBER} fire damage to the opponent before the attack begins."
[/dummy]
	[/specials]
[/attack]
{THUNDERBOLT_EVENT {NUMBER}}
[+attack]
[+specials]
#enddef
#define THUNDERBOLT_EVENT NUMBER
#####################
# Thunderbolt
#####################

    [event]
       name="attack"
       first_time_only=no
		
       [filter_attack]
           special=thunderbolt
       [/filter_attack]
		
		{RANDOM 1..4}
		[if]
		 [variable]
                    name=random
                    greater_than=3
                 [/variable]
			[then]
                                [sound]
                                  name=lightning.ogg
                                [/sound]
				{VARIABLE temp_y $y2}
				{VARIABLE_OP temp_y add -2}
				[item]
					x,y=$x2,$temp_y
					halo="halo/lightning-bolt-1-[1~4].png:100"}
				[/item]
				[harm_unit]
					[filter]
						x,y=$x2,$y2
					[/filter]
					[filter_second]
						x,y=$x1,$y1
					[/filter_second]
					amount={NUMBER}
					damage_type=fire
					fire_event=yes
					animate=defender
					delay=100
					experience=yes
				[/harm_unit]
                                [delay]
                                  time=100
                                [/delay]
				[remove_item]
					x,y=$x2,$temp_y
				[/remove_item]
				{CLEAR_VARIABLE temp_y}
			[/then]
                        [else]
                        [/else]
		[/if]
		{CLEAR_VARIABLE random}
	[/event]
#enddef
#define WEAPON_SPECIAL_OVERWHELM
	[attacks]
		id=overwhelm
		name= _ "overwhelm"
		description= _ "When used in offence, this attacks inhibits defender's reaction"
		value=0
		active_on=offense
		apply_to=defender
	[/attacks]
#enddef
#define SPECIAL_NOTES_OVERWHELM
_" The attack of this unit overwhelms the defender, so he can't retaliate."#enddef
#define WEAPON_SPECIAL_KNOCKBACK
    [dummy]
        id=knockback
        name= _ "knockback"
        description=_ "When a unit is hit with a knockback attack, it is immediately pushed back one hex away from the attacker. Units cannot be knocked back into an occupied hex, out of villages or onto terrain they normally could not move to. Only works on offense."
    [/dummy]
    [/specials]
[/attack]

   [event]
       name=attack end
       first_time_only=no
   
       [filter_attack]
           special=knockback
       [/filter_attack]
   
       [filter_second]
			[status]
				burning=no
			[/status]
           [not]
				ability=steadfast
               [filter_location]
                   terrain=*^V*
               [/filter_location]
				
           [/not]
       [/filter_second]
   
       [if]
           [variable]
               name=second_unit.hitpoints
               greater_than=0
           [/variable]
			
			[then]
               [store_locations]
                   [not]
                       [filter]
                       [/filter]
                   [/not]
   
                   [filter_adjacent_location]
                       x,y=$x2,$y2
                       adjacent=-$unit.facing
                   [/filter_adjacent_location]
   
                   variable=knockback_target_hex
               [/store_locations]
   
               [if]
                   [variable]
                       name=knockback_target_hex.length
                       greater_than=0
                   [/variable]
   
                   [then]
						[sound]
                            name=mace.ogg
                        [/sound]
						
						[move_unit]
                            x,y=$x2,$y2
						    to_x,to_y=$knockback_target_hex.x,$knockback_target_hex.y
						   check_passability=yes
						[/move_unit]
   
                       [if]
                           [have_unit]
                               x,y=$knockback_target_hex.x,$knockback_target_hex.y
                           [/have_unit]
   
                           [then]
							   
							    [store_unit]
                                   [filter]
                                       x,y=$knockback_target_hex.x,$knockback_target_hex.y
                                   [/filter]
   
                                   kill=yes
                                   variable=knockbacked
                               [/store_unit]
   
                               [unstore_unit]
                                   variable=knockbacked
                                   text= _ "Knockback!"
                                   {COLOR_HARM}
                               [/unstore_unit]
   
                               {CLEAR_VARIABLE knockbacked}
                           [/then]
                       [/if]
                   [/then]
               [/if]
   
               {CLEAR_VARIABLE knockback_direction,knockback_target_hex}
           [/then]
       [/if]
   [/event]
    [+attack]
    [+specials]
#enddef
#define SPECIAL_NOTES_KNOCKBACK
_"This unit can knockback enemies on attack."#enddef
#define WEAPON_SPECIAL_TRAMPLE
    [dummy]
        id=trample
        name= _ "trample"
        description=_ "When a unit uses a trample attack, he moves across the enemy unit, stopping behind the attacked unit."
    [/dummy]
    [/specials]
[/attack]

     [event]
       name=attack end
       first_time_only=no
   
       [filter_attack]
           special=trample
       [/filter_attack]
   
       [filter_second]
           [not]
               [filter_location]
                   terrain=*^V*
               [/filter_location]
           [/not]
       [/filter_second]
   
               [store_locations]
                   [not]
                       [filter]
                       [/filter]
                   [/not]
   
                   [filter_adjacent_location]
                       x,y=$x2,$y2
                       adjacent=-$unit.facing
                   [/filter_adjacent_location]
   
                   variable=knockback_target_hex
               [/store_locations]
   
               [if]
                   [variable]
                       name=knockback_target_hex.length
                       greater_than=0
                   [/variable]
   
                   [then]
						[teleport]
							[filter]
								x,y=$x1,$y1
							[/filter]
							animate=yes
							
						    x,y=$knockback_target_hex.x,$knockback_target_hex.y
						   check_passability=yes
						   clear_shroud=yes
						[/teleport]
						[redraw]
						[/redraw]
                       [if]
                           [have_unit]
                               x,y=$knockback_target_hex.x,$knockback_target_hex.y
                           [/have_unit]
   
                           [then]
							   
							    [store_unit]
                                   [filter]
                                       x,y=$knockback_target_hex.x,$knockback_target_hex.y
                                   [/filter]
   
                                   kill=yes
                                   variable=knockbacked
                               [/store_unit]
   
                               [unstore_unit]
                                   variable=knockbacked
                                   text= _ "Trample!"
                                   {COLOR_HARM}
                               [/unstore_unit]
   
                               {CLEAR_VARIABLE knockbacked}
                           [/then]
                       [/if]
                   [/then]
               [/if]
   
               {CLEAR_VARIABLE knockback_direction,knockback_target_hex}
   [/event]
    [+attack]
    [+specials]
#enddef
#define SPECIAL_NOTES_TRAMPLE
_"This unit can knockback enemies on attack."#enddef


#define WEAPON_SPECIAL_LANCE_OF_SERRUL
    [dummy]
        id=soultaker
        name= _ "lance of serrul"
        description=_ "The attack gains +1 damage per killed unit."
    [/dummy]
    [/specials]
[/attack]

[event]
	name=die
	first_time_only=no

	[filter_second_attack]
		special=soultaker
	[/filter_second_attack]

	[unstore_unit]
		variable=second_unit
		{COLOR_HEAL}
		text= _ "+1 damage"
		find_vacant=no
	[/unstore_unit]
		
	[object]
		silent=yes
		duration=forever

		[filter]
			x,y=$x2,$y2
		[/filter]
		[animate_unit]
			flag=levelin
		[/animate_unit]
		[effect]
			apply_to=attack
			name=$second_weapon.name
			increase_damage=1
		[/effect]
		[animate_unit]
			flag=levelout
		[/animate_unit]


	[/object]
[/event]
    [+attack]
    [+specials]
#enddef
#define SPECIAL_NOTES_LANCE_OF_SERRUL
_"The 'Lance of Serrul' attack of this unit gains +1 damage per unit killed."#enddef


#define WEAPON_SPECIAL_TSTRIKE ANIMATE
    [dummy]
        id=teleport strike
        name= _ "teleport strike"
        description=_ "When this unit attacks another unit with a teleport strike attack, he positions himself behind the attacked unit after the attack."
    [/dummy]
    [/specials]
[/attack]
       [event]
       name=attack end
       first_time_only=no
   
       [filter_attack]
           special=teleport strike
       [/filter_attack]
   
#       [filter_second]
#           [not]
#               [filter_location]
#                   terrain=*^V*
#               [/filter_location]
#           [/not]
#       [/filter_second]
   
               [store_locations]
                   [not]
                       [filter]
                       [/filter]
                   [/not]
   
                   [filter_adjacent_location]
                       x,y=$x2,$y2
                       adjacent=-$unit.facing
                   [/filter_adjacent_location]
   
                   variable=knockback_target_hex
               [/store_locations]
   
               [if]
                   [variable]
                       name=knockback_target_hex.length
                       greater_than=0
                   [/variable]
   
                   [then]

						{THUNDER ()}
						
						
						[teleport]
							[filter]
								x,y=$x1,$y1
							[/filter]
							animate={ANIMATE}
							
						    x,y=$knockback_target_hex.x,$knockback_target_hex.y
						   check_passability=yes
						   clear_shroud=yes
						[/teleport]
						[redraw]
						[/redraw]
                       [if]
                           [have_unit]
                               x,y=$knockback_target_hex.x,$knockback_target_hex.y
                           [/have_unit]
   
                           [then]
							   
							    [store_unit]
                                   [filter]
                                       x,y=$knockback_target_hex.x,$knockback_target_hex.y
                                   [/filter]
   
                                   kill=yes
                                   variable=knockbacked
                               [/store_unit]
   
                               [unstore_unit]
                                   variable=knockbacked
                                   text= _ "Teleport!"
                                   {COLOR_HARM}
                               [/unstore_unit]
   
                               {CLEAR_VARIABLE knockbacked}
                           [/then]
                       [/if]
                   [/then]
               [/if]
   
               {CLEAR_VARIABLE knockback_direction,knockback_target_hex}
   [/event]
    [+attack]
    [+specials]
#enddef
#define SPECIAL_NOTES_TSTRIKE
_"When this unit attacks another unit with a teleport strike attack, he positions himself behind the attacked unit after the attack."#enddef
#define SPECIAL_CRAWLING_FIRE
    [dummy]
        id=crawlingfire
        name= _ "crawling fire"
        description=_ "This unit burns down the armor of the enemy. Any enemy with a burned armor takes +30% extra damage from further fire attacks."
    [/dummy]
    [/specials]
    [/attack]
[event]
        name=attacker_hits
        first_time_only=no

        [filter_attack]
            special=crawlingfire
        [/filter_attack]

        [filter_second]
            [not]
                level=0
                [or]
                  [status]
                      lessresistance=yes
                  [/status]
                [/or]
            [/not]
        [/filter_second]

        {VARIABLE second_unit.status.lessresistance yes}

        [unstore_unit]
            variable=second_unit
            find_vacant=no
            text= _ "burned armour"
            female_text= _ "female^burned armour"
            red,green,blue=255,128,64
        [/unstore_unit]

        [object]
            silent=yes
            duration=turn

            [filter]
                x,y=$x2,$y2
            [/filter]

            [effect]
                apply_to=image_mod
                replace="CS(50,22,12)"
            [/effect]

            [effect]
                apply_to=resistance
				replace=no
				[resistance]
					fire=30
				[/resistance]
            [/effect]
        [/object]
    [/event]

    [event]
        name=side turn end
        first_time_only=no

        [store_unit]
            [filter]
                side=$side_number
                status=lessresistance
            [/filter]
            variable=lessresistance
        [/store_unit]

        {FOREACH lessresistance i}
            {CLEAR_VARIABLE lessresistance[$i].status.lessresistance}

            [unstore_unit]
                variable=lessresistance[$i]
            [/unstore_unit]
        {NEXT i}

        {CLEAR_VARIABLE lessresistance}
    [/event]
    [+attack]
    [+specials]
#enddef
#define SPECIAL_NOTES_NAPTHA_FIRE
_"This unit burns down the armor of the enemy. Any enemy with a burned armor takes +30% extra damage from further fire attacks."#enddef
#define WEAPON_SPECIAL_SURPRISE ID
[dummy]
	id=surprise{ID}
	name= _ "surprise"
	description= _ "When an enemy moves adjacent to this unit it will be hit with a single melee strike before normal combat takes place."
[/dummy]
    [/specials]
    [/attack]
[event]
	name=moveto
	first_time_only=no
	[filter]
		[filter_adjacent]
			is_enemy=yes
			[filter_wml]
				[attack]
					[specials]
						[dummy]
							id=surprise{ID}
						[/dummy]
					[/specials]
				[/attack]
			[/filter_wml]
		[/filter_adjacent]
	[/filter]

	[store_unit]
		[filter]
			[filter_wml]
				[attack]
					[specials]
						[dummy]
							id=surprise{ID}
						[/dummy]
					[/specials]
				[/attack]
			[/filter_wml]
			[filter_adjacent]
				x,y=$x1,$y1
			[/filter_adjacent]
		[/filter]
		variable=attacker
	[/store_unit]
	{VARIABLE temp_damage $attacker.attack[0].damage}
	{VARIABLE temp_type $attacker.attack[0].type}
	[unstore_unit]
		variable=attacker
		text=_ "Surprise"
		{COLOR_HEAL}
	[/unstore_unit]
		
	[harm_unit]
		[filter]
			x,y=$x1,$y1
		[/filter]
		[filter_second]
			[filter_wml]
				[attack]
					[specials]
						[dummy]
							id=surprise{ID}
						[/dummy]
					[/specials]
				[/attack]
			[/filter_wml]
			[filter_adjacent]
				x,y=$x1,$y1
			[/filter_adjacent]
		[/filter_second]
		amount=$temp_damage
		damage_type=$temp_type
		fire_event=yes
		animate=yes
		experience=yes
	[/harm_unit]

	{CLEAR_VARIABLE temp_damage}
	{CLEAR_VARIABLE temp_type}
	{CLEAR_VARIABLE attacker}
[/event]
    [+attack]
    [+specials]
#enddef
#define WEAPON_SPECIAL_SHARPEN
[dummy]
	id=sharpen
	name= _ "sharpen"
	description= _ "killing an enemy unit with this weapon grants it permanently +1 damage"
[/dummy]
    [/specials]
    [/attack]
	##Abilities:
	[event]
		id=ability_sharpen_die
		name=die
		first_time_only=no

		[filter_second_attack]
			special=sharpen
		[/filter_second_attack]

		[unstore_unit]
			variable=second_unit
			{COLOR_HEAL}
			text= _ "+1 damage"
			find_vacant=no
		[/unstore_unit]
		
		[object]
			silent=yes
			duration=forever

			[filter]
				x,y=$x2,$y2
			[/filter]

			[effect]
				apply_to=attack
				name=$second_weapon.name
				increase_damage=1
			[/effect]
		[/object]
	[/event]
    [+attack]
    [+specials]
#enddef
#define WEAPON_SPECIAL_WHIRLING_COUNTERATTACK
    [chance_to_hit]
        id=whirling counterattack
        name= _ "whirling counterattack"
        description= _ "When used defensively, this attacks damages all surrounding foes for a half of the damage, and it always has a 70% chance to hit regardless of the defensive ability of the attacking unit."
        description_inactive= _ "When used defensively, this attacks damages all surrounding foes for a half of the damage, and it always has a 70% chance to hit regardless of the defensive ability of the attacking unit."
        #This is partially coded elsewhere.
        value=70
        cumulative=no
        active_on=defense
    [/chance_to_hit]
    [/specials]
    [/attack]
    [event]
        name=defender hits
        first_time_only=no
        [filter_second_attack]
            special=whirling counterattack
        [/filter_second_attack]
#        {INCORPORATE_EFFECTS_RETALIATION}
        {VARIABLE has_leech 0}
        {VARIABLE has_drain 0}
        {VARIABLE has_slow no}
        {VARIABLE has_poison no}
        {FOREACH second_weapon.specials.damage i}
        [if]
            [variable]
                name=second_weapon.specials.damage[$i].id
                equals=leeches
            [/variable]
            [then]
                {VARIABLE has_leech yes}
            [/then]
        [/if]
        {NEXT i}
        [if]
            [variable]
                name=second_weapon.specials.poison.id
                equals=poison
            [/variable]
            [then]
                {VARIABLE has_poison yes}

            [/then]
        [/if]
        [if]
            [variable]
                name=second_weapon.specials.drains.id
                equals=drains
            [/variable]
            [then]
                {VARIABLE has_drain yes}

            [/then]
        [/if]
        [if]
            [variable]
                name=second_weapon.specials.slow.id
                equals=slow
            [/variable]
            [then]
                {VARIABLE has_slow yes}

            [/then]
        [/if]
#{DEBUG "Whirling Counterattack Hit: dmg $damage  leech $has_leech  poison $has_poison  drain $has_drain  slow $has_slow"}
        [if]
            [variable]
                name=has_leech
                not_equals=0
            [/variable]
            [or]
                [variable]
                    name=has_drain
                    not_equals=0
                [/variable]
            [/or]
            [then]
                [store_unit]        # We need to know how many units were leeched, and what were their resistances
                    [filter]
                        [filter_adjacent]
                            x,y=$x2,$y2
                        [/filter_adjacent]
                        [not]
                            x,y=$x1,$y1
                        [/not]
                        [filter_side]
                            [enemy_of]
                                side=$second_unit.side
                            [/enemy_of]
                        [/filter_side]
                    [/filter]
                    variable=units
                [/store_unit]  
                {VARIABLE damage_to_leech 0}
                {VARIABLE damage_to_drain 0}
                {FOREACH units i}
                    [get_unit_resistance]
                        find_in=units[$i]
                        damage_type=$weapon.type
                        to_variable=secondary_resistance
                    [/get_unit_resistance]
                    [if]
                        [variable]
                            name=secondary_resistance
                            less_than=0
                        [/variable]
                        [then]
                            {VARIABLE secondary_resistance 100}
                        [/then]
                    [/if]
                    {VARIABLE secondary_damage $damage}
                    {VARIABLE_OP secondary_damage multiply $secondary_resistance}
                    [if]
                        [variable]
                            name=secondary_damage
                            greater_than=$($units[$i].hitpoints*100)
                        [/variable]
                        [then]
                            {VARIABLE true_damage $units[$i].hitpoints}
                            {VARIABLE_OP true_damage multiply 100}
                        [/then]
                        [else]
                            {VARIABLE true_damage $secondary_damage}
                        [/else]
                    [/if]
                    # Note: Damage that is too small to leech can be combined from multiple targets into a real hitpoint.
                    # Example: 4 damage to 3 targets. Each hit alone produces 0 leech gain, but all 3 together get 1 hitpoint.
                    [if]
                        [variable]
                            name=has_leech
                            not_equals=0
                        [/variable]
                        [then]
                            {VARIABLE_OP damage_to_leech add $true_damage}
                        [/then]
                    [/if]
                    # Drain
                    [if]
                        [variable]
                            name=units[$i].status.not_living
                            not_equals=yes
                        [/variable]
                    [and]
                        [variable]
                            name=has_drain
                            not_equals=0
                        [/variable]
                    [/and]
                        [then]
                            {VARIABLE_OP damage_to_drain add $true_damage}
                        [/then]
                    [/if]
#{DEBUG "Whirling Counterattack loop unit at $units[$i].x,$units[$i].y  Resist $secondary_resistance  secD $secondary_damage  trueD $true_damage  damage_to_leech $damage_to_leech  damage_to_drain $damage_to_drain"}
                    {CLEAR_VARIABLE secondary_resistance,secondary_damage,true_damage}
                {NEXT i}
                [if]
                    [variable]
                        name=has_leech
                        not_equals=0
                    [/variable]
                    [then]
                        {VARIABLE healed_amount $damage_to_leech}
                        # Divide by 100 to rescale, then 10% leech factor
                        {VARIABLE_OP healed_amount divide 1000}
                        {VARIABLE_OP healed_amount round 0}
#{DEBUG "Whirling Counterattack LeechAddition $damage_to_leech  real heal $healed_amount"}
                        [heal_unit]
                            [filter]
                                x,y=$x2,$y2
                            [/filter]
                            amount=$healed_amount
                            animate=yes
                            restore_statuses=no
                        [/heal_unit]
                        {CLEAR_VARIABLE healed_amount}
                    [/then]
                [/if]
                [if]
                    [variable]
                        name=has_drain
                        not_equals=0
                    [/variable]
                    [then]
                        {VARIABLE healed_amount $damage_to_drain}
                        # Divide by 100 to rescale, then 50% drain factor
                        {VARIABLE_OP healed_amount divide 200}
                        {VARIABLE_OP healed_amount round 0}
#{DEBUG "Whirling Counterattack DrainAddition $damage_to_drain  real heal $healed_amount"}
                        [heal_unit]
                            [filter]
                                x,y=$x2,$y2
                            [/filter]
                            amount=$healed_amount
                            animate=yes
                            restore_statuses=no
                        [/heal_unit]
                        {CLEAR_VARIABLE healed_amount}
                    [/then]
                [/if]
                {CLEAR_VARIABLE units}
                {CLEAR_VARIABLE damage_to_leech,damage_to_drain,healed_amount}
            [/then]
        [/if]
        [harm_unit]
            [filter]
                [filter_adjacent]
                    x,y=$x2,$y2
                [/filter_adjacent]
                [not]
                    x,y=$x1,$y1
                [/not]
                    [filter_side]
                        [enemy_of]
                            side=$second_unit.side
                        [/enemy_of]
                    [/filter_side]
            [/filter]
            [filter_second]
                x,y=$x2,$y2
            [/filter_second]
            alignment=second_unit.alignment
            amount=$($second_weapon.damage/2)
            damage_type=$second_weapon.type
            fire_event=yes
            poisoned=$has_poison
            slowed=$has_slow
        [/harm_unit] 
        {CLEAR_VARIABLE has_slow}
        {CLEAR_VARIABLE has_poison}
        {CLEAR_VARIABLE has_leech}
        {CLEAR_VARIABLE has_drain,damage}
    [/event]
    [+attack]
    [+specials]
#enddef
#define WEAPON_SPECIAL_ARMOR_PENETRATION VALUE
    [dummy]
        id=armor penetraction
        name= _ "armor penetration ({VALUE})"
        description=_ "Enemies hit with this attack take +{VALUE}% extra damage from further physical attacks for the attacker's turn."
    [/dummy]
[event]
        name=attacker_hits
        first_time_only=no

        [filter_attack]
            special=armor penetration
        [/filter_attack]

        {VARIABLE second_unit.status.lessresistance{VALUE} yes}

        [unstore_unit]
            variable=second_unit
            find_vacant=no
            text= _ "-{VALUE}% physical resistance"
            female_text= _ "female^-{VALUE}% physica; resistance"
            red,green,blue=255,128,64
        [/unstore_unit]

        [object]
            silent=yes
            duration=turn end

            [filter]
                x,y=$x2,$y2
            [/filter]

            [effect]
                apply_to=image_mod
                replace="CS(50,22,12)"
            [/effect]

            [effect]
                apply_to=resistance
				replace=no
				[resistance]
					blade={VALUE}
					pierce={VALUE}
					impact={VALUE}
				[/resistance]
            [/effect]
        [/object]
    [/event]

    [event]
        name=side turn end
        first_time_only=no

        [store_unit]
            [filter]
                side=$side_number
                status=lessresistance{VALUE}
            [/filter]
            variable=lessresistance
        [/store_unit]

        {FOREACH lessresistance i}
            {CLEAR_VARIABLE lessresistance[$i].status.lessresistance{VALUE}}

            [unstore_unit]
                variable=lessresistance[$i]
            [/unstore_unit]
        {NEXT i}

        {CLEAR_VARIABLE lessresistance}
    [/event]
#enddef
#define WEAPON_SPECIAL_ARMOR_PENETRATION_TYPE TYPE VALUE
    [dummy]
        id=armor penetraction
        name= _ "armor penetration ({TYPE})"
        description=_ "Enemies hit with this attack take +{VALUE}% extra damage from further {TYPE} attacks for the attacker's turn."
    [/dummy]
[event]
        name=attacker_hits
        first_time_only=no

        [filter_attack]
            special=armor penetration
        [/filter_attack]

        {VARIABLE second_unit.status.lessresistance{TYPE}{VALUE} yes}

        [unstore_unit]
            variable=second_unit
            find_vacant=no
            text= _ "-{VALUE}% {TYPE} resistance"
            female_text= _ "female^-{VALUE}% {TYPE} resistance"
            red,green,blue=255,128,64
        [/unstore_unit]

        [object]
            silent=yes
            duration=turn end

            [filter]
                x,y=$x2,$y2
            [/filter]

            [effect]
                apply_to=image_mod
                replace="CS(50,22,12)"
            [/effect]

            [effect]
                apply_to=resistance
				replace=no
				[resistance]
					{TYPE}={VALUE}
				[/resistance]
            [/effect]
        [/object]
    [/event]

    [event]
        name=side turn end
        first_time_only=no

        [store_unit]
            [filter]
                side=$side_number
                status=lessresistance{TYPE}{VALUE}
            [/filter]
            variable=lessresistance
        [/store_unit]

        {FOREACH lessresistance i}
            {CLEAR_VARIABLE lessresistance[$i].status.lessresistance{TYPE}{VALUE}}

            [unstore_unit]
                variable=lessresistance[$i]
            [/unstore_unit]
        {NEXT i}

        {CLEAR_VARIABLE lessresistance}
    [/event]
#enddef
#define WEAPON_SPECIAL_DEVOTED 
    [chance_to_hit]
        id=devoted
        name= _ "devoted"
        description= _"This attack always has a 80% chance to hit on offense regardless of the defensive ability of the unit being attacked."
        value=80
        cumulative=no
	active_on=offense
    [/chance_to_hit]
#enddef
#define WEAPON_SPECIAL_DREAD
    [damage]
        id=dread
        name= _ "dread"
        name_inactive= _ "dread"
        description= _ "When this attack is used offensively, this unit takes one third less damage in retaliation."
        description_inactive= _ "When this attack is used offensively, this unit takes one third less damage in retaliation."
        active_on=offense
        apply_to=opponent
        multiply=0.66
    [/damage]
#enddef
#define WEAPON_SPECIAL_COUNTER
    # Canned definition of the Counter ability to be included in a
    # [specials] clause.
    [chance_to_hit]
        id=counter
        name= _ "counter"
        description= _ "When used defensively, this attack always has at least a 60% chance to hit."
        value=60
        cumulative=yes
        active_on=defense
    [/chance_to_hit]
#enddef

#define WEAPON_SPECIAL_MIND_RAID TYPE WEAPON
[heals]
      name= _ "mind raid"
      description= _ "The Mind Raid ability takes away 2 exp from the enemy on each successful hit and gives it to the attacker."
[/heals]
[/specials]
[/attack]
	[event]
		name=attack
		first_time_only=no

		[filter]
			type={TYPE}
		[/filter]

		[filter_attack]
			name={WEAPON}
		[/filter_attack]

		{VARIABLE hit_number 0}
	[/event]
	[event]
		name=attacker_hits
		first_time_only=no

		[filter]
			type={TYPE}
		[/filter]

		[filter_attack]
			name={WEAPON}
		[/filter_attack]

		{VARIABLE_OP hit_number add 1}
		{VARIABLE secondid $second_unit.id}
	[/event]
	[event]
		name=attack_end
		first_time_only=no

		[filter]
			type={TYPE}
		[/filter]

		[filter_attack]
			name={WEAPON}
		[/filter_attack]

		# stores attack and defenders xp
		{STORE_UNIT_VAR x,y=$x1,$y1 experience attacker_xp}
		{STORE_UNIT_VAR x,y=$x2,$y2 experience defender_xp}

		{VARIABLE initial_defender_xp $defender_xp}
		{VARIABLE xploss 0}

		# doubles the hit number so it now is the amount that will be added or removed from the units xp
		{VARIABLE_OP hit_number multiply 2}
		{VARIABLE_OP attacker_xp add "$hit_number"}
		{VARIABLE_OP hit_number multiply -1}
		{VARIABLE_OP defender_xp add "$hit_number"}

		{VARIABLE_OP xploss add "$hit_number"}


		#if the defender has less experience then the attackers level negatived then when the attack finishes and it gains that experience
		#it will still be less then 0 and so a problem
		{ROL_IF defender_xp less_than 0 (
			[then]

				#take the amount the defender is negative back away from the attacker (its not allowed that part)
				{VARIABLE_OP attacker_xp add "$defender_xp"}


				#change the hit number which i printed to be correct
				{VARIABLE_OP hit_number add "-$defender_xp"}

				{VARIABLE_OP xploss add "-$defender_xp"}

				#then put defender at 0 cause cant get less than 0
				{VARIABLE_OP defender_xp value 0}
			[/then]
		)}

		[if]
			[have_unit]
				x,y=$x2,$y2
			[/have_unit]
			[then]
				#change the defender to now have the new experience number
				{MODIFY_UNIT x,y=$x2,$y2 experience "$defender_xp"}

				{ROL_IF initial_defender_xp greater_than $defender_xp (

					[then] 
						{VARIABLE_OP initial_defender_xp add "$defender_xp"}
						#only if u actaully steal does it print numbers
						{PICTURE_HIT (second_unit) (XP $xploss) (id=ROL$secondid) (200,200,200)}
					[/then]
				)}
			[/then]
		[/if]
		
		#change the attacker to have the new experience number
		{MODIFY_UNIT x,y=$x1,$y1 experience "$attacker_xp"}

		{CLEAR_VARIABLE hit_number}
		{CLEAR_VARIABLE secondid}
		{CLEAR_VARIABLE attacker_xp}
		{CLEAR_VARIABLE defender_xp}
	[/event]
[+attack]
[+specials]
#enddef

#define SPECIAL_NOTES_TRAP
    _"This unit has attack that trap. When an enemy is trapped it cannot move. This unit can trap enemies for 2 turns."#enddef

#define WEAPON_SPECIAL_TRAP UNIT WEAPON
   [dummy]
      id=ROL_trap
      name= _ "trap"
      description= _ "When this attacker hits the defender is trapped and it can not move but can still attack units adjacent to it. The effect wears off after two turns."
   [/dummy]
[/specials]
[/attack]
[event]
    name=turn refresh
    #first_time_only=no

    [lua]
        code=<<
            local _ = wesnoth.textdomain "wesnoth-ROTL"
            local old_unit_status = wesnoth.theme_items.unit_status
            function wesnoth.theme_items.unit_status()
                local u = wesnoth.get_displayed_unit()
                if not u then return {} end
                local s = old_unit_status()
                if u.status.ROTLtrapped then
                    table.insert(s, { "element", {
                        image = "misc/cage-status.png",
                        tooltip = _"trapped: This unit is trapped. Units that are trapped may not move but may attack units in any adjacent spaces. The effect wears off after two turns."
                    } })
                end
                return s
            end
        >>
    [/lua]
[/event]
    [event]
        name=attacker_hits
        first_time_only=no


	[filter]
	   type={UNIT}
	[/filter]

        [filter_attack]
	    name={WEAPON}
            specials=ROL_trap
        [/filter_attack]

        [filter_second]
            [not]
                level=0
            [/not]
        [/filter_second]

        [if]
            [variable]
                name=second_unit.variables.trapped
                boolean_equals=no
            [/variable]
            [then]
                {VARIABLE second_unit.variables.trapped yes}
		{VARIABLE second_unit.status.ROTLtrapped yes}
		[store_unit]
		    [filter]
		    	id=ROL$second_unit.id
		    [/filter]
		   variable=trapmentUnitToMoves
		[/store_unit]

                [if]
                    [variable]
                        name=second_unit.gender
                        equals=female
                    [/variable]

                    [then]
                        [set_variable]
                            name=tmp_trapped_text
                            value= _ "female^trapped"
                        [/set_variable]
                    [/then]

                    [else]
                        [set_variable]
                            name=tmp_trapped_text
                            value= _ "trapped"
                        [/set_variable]
                    [/else]
                [/if]

                [unstore_unit]
                    variable=second_unit
                    find_vacant=no
                    text=$tmp_trapped_text
                    red,green,blue=61,31,5
                [/unstore_unit]

                [object]
                    silent=yes
                    duration=scenario

                    [filter]
                        x,y=$x2,$y2
                    [/filter]

                    [effect]
                        apply_to=image_mod
                        replace="CS(61,31,5)"
                    [/effect]

                    [effect]
                        apply_to=ellipse
                        ellipse="misc/ellipse-nozoc"
                    [/effect]

                    [effect]
                        apply_to=movement
			set=0
                    [/effect]
                [/object]

                [clear_variable]
                    name=tmp_trapped_text
                [/clear_variable]
            [/then]
        [/if]
    [/event]

    [event]
        name=turn refresh
        first_time_only=no

	# All second turn trapped units go here
	# basically if there second turn trapped they will have trappedAction=yes
	# first it clears that then it fixes the units movement

        [store_unit]
            [filter]
                side=$side_number
                [filter_wml]
                    [variables]
                        trappedAction=yes
                    [/variables]
                [/filter_wml]
            [/filter]
            variable=trapped
        [/store_unit]

        {FOREACH trapped i}
	    {VARIABLE trapped[$i].variables.trappedAction no}
	    {VARIABLE trapped[$i].status.ROTLtrapped no}

            [unstore_unit]
                variable=trapped[$i]
            [/unstore_unit]

            [object]
                silent=yes
                duration=scenario

                [filter]
                    x,y=$trapped[$i].x,$trapped[$i].y
                [/filter]

                [effect]
                    apply_to=image_mod
                    replace="NOP()"
                [/effect]

                [effect]
                    apply_to=ellipse
                    ellipse="misc/ellipse"
                [/effect]

                [effect]
                    apply_to=movement
                    set=$trapmentUnitToMoves.max_moves
                [/effect]

		#once its gotten that it can unstore that unit
        	[unstore_unit]
        	    variable=trapmentUnitToMoves[$i]
        	[/unstore_unit]
            [/object]

        {NEXT i}

	# once its done that its gone through all the trapped action units and fixed them so we now clear that variable
	{CLEAR_VARIABLE trappedAction}
	

	# trapped first refresh
	# so basically all first turn trapped units appear here (having the variable trapped=yes)
	# the variable is then set to trappedAction=yes

        [store_unit]
            [filter]
                side=$side_number
                [filter_wml]
                    [variables]
                        trapped=yes
                    [/variables]
                [/filter_wml]
            [/filter]
            variable=trappedT2
        [/store_unit]

        {FOREACH trappedT2 i}
	    {VARIABLE trappedT2[$i].variables.trapped no}	

	    {VARIABLE trappedT2[$i].variables.trappedAction yes}
            [unstore_unit]
                variable=trappedT2[$i]
            [/unstore_unit]

		# lighten the color of the unit
                [object]
                    silent=yes
                    duration=scenario

                    [filter]
                        x,y=$trappedT2[$i].x,$trappedT2[$i].y
                    [/filter]

                    [effect]
                        apply_to=image_mod
                        replace="CS(107,54,14)"
                    [/effect]
                [/object]

        {NEXT i}

	# once its done that its gone through all the trapped units and fixed them so we now clear that variable
	{CLEAR_VARIABLE trapped}

    [/event]
[+attack]
[+specials]
#enddef

#define ENSNARED_UNIT_CODE FIR_SEC_UNIT FILTER_X_Y
        [if]
            [variable]
                name={FIR_SEC_UNIT}.variables.ensnared
                boolean_equals=no
            [/variable]
            [then]
                {VARIABLE {FIR_SEC_UNIT}.variables.ensnared yes}
		{VARIABLE {FIR_SEC_UNIT}.status.ROTLensnared yes}
		[store_unit]
		    [filter]
		    	id=ROL${FIR_SEC_UNIT}.id
		    [/filter]
		   variable=ensnaredUnitDefense
		[/store_unit]

                [if]
                    [variable]
                        name={FIR_SEC_UNIT}.gender
                        equals=female
                    [/variable]

                    [then]
                        [set_variable]
                            name=tmp_ensnared_text
                            value= _ "female^ensnared"
                        [/set_variable]
                    [/then]

                    [else]
                        [set_variable]
                            name=tmp_ensnared_text
                            value= _ "ensnared"
                        [/set_variable]
                    [/else]
                [/if]

		[delay]
		   time=200
		[/delay]

                [unstore_unit]
                    variable={FIR_SEC_UNIT}
                    find_vacant=no
                    text=$tmp_ensnared_text
                    red,green,blue=255,216,0
                [/unstore_unit]

                [unit_overlay]
                    x,y={FILTER_X_Y}
                    image=misc/web-overlay.png
                [/unit_overlay]

                [object]
                    silent=yes
                    duration=scenario

                    [filter]
                        x,y={FILTER_X_Y}
                    [/filter]

                    [effect]
                        apply_to=defense
			replace=yes
		      [defense]
			deep_water=90
        		shallow_water=90
        		swamp_water=90
        		reef=90
        		flat=90
        		sand=90
        		forest=90
        		hills=90
        		mountains=90
        		village=90
        		castle=90
        		cave=90
        		frozen=90
        		unwalkable=90
        		fungus=90
		      [/defense]
                    [/effect]
                [/object]

                [clear_variable]
                    name=tmp_ensnared_text
                [/clear_variable]
            [/then]
        [/if]
#enddef

#define SPECIAL_NOTES_ENSNARE
    _"This unit has attacks that ensnare. When an enemy is ensnared all its defenses become 10% making it an vanurable target. The effect wears off after 1 turn."#enddef

#define WEAPON_SPECIAL_ENSNARE UNIT ATTACK
   [dummy]
      id=ROL_ensnare
      name= _ "ensnare"
      description= _ "Units hit with this attack are ensnared and all defences become 10%. The effect wares off after one turn."
   [/dummy]
[/specials]
[/attack]
[event]
    name=turn refresh
    #first_time_only=no

    [lua]
        code=<<
            local _ = wesnoth.textdomain "wesnoth-ROTL"
            local old_unit_status = wesnoth.theme_items.unit_status
            function wesnoth.theme_items.unit_status()
                local u = wesnoth.get_displayed_unit()
                if not u then return {} end
                local s = old_unit_status()
                if u.status.ROTLensnared then
                    table.insert(s, { "element", {
                        image = "misc/web-status.png",
                        tooltip = _"ensnared: This unit is ensnared. Ensnared units' defenses are reduced to 10% making them vanurable to enemy attacks. Units remain ensnared for 1 round."
                    } })
                end
                return s
            end
        >>
    [/lua]
[/event]

    [event]
        name=attacker_hits
        first_time_only=no

	[filter]
	   type={UNIT}
	[/filter]

        [filter_attack]
	    name={ATTACK}
            specials=ROL_ensnare
        [/filter_attack]

	{ENSNARED_UNIT_CODE (second_unit) ($x2,$y2)}
    [/event]

    [event]
        name=defender_hits
        first_time_only=no

	[filter_second]
	   type={UNIT}
	[/filter_second]

        [filter_second_attack]
	    name={ATTACK}
            specials=ROL_ensnare
        [/filter_second_attack]

	{ENSNARED_UNIT_CODE (unit) ($x1,$y1)}
    [/event]

    [event]
        name=turn refresh
        first_time_only=no

        [store_unit]
            [filter]
                side=$side_number
                [filter_wml]
                    [variables]
                        ensnared=yes
                    [/variables]
                [/filter_wml]
            [/filter]
            variable=ensnared
        [/store_unit]

        {FOREACH ensnared i}
	    {VARIABLE ensnared[$i].variables.ensnared no}
	    {VARIABLE ensnared[$i].status.ROTLensnared no}

            [unstore_unit]
                variable=ensnared[$i]
            [/unstore_unit]

            [remove_unit_overlay]
                x,y=$ensnared[$i].x,$ensnared[$i].y
                image=misc/web-overlay.png
            [/remove_unit_overlay]

            [object]
                silent=yes
                duration=scenario

                [filter]
                    x,y=$ensnared[$i].x,$ensnared[$i].y
                [/filter]

                [effect]
                    apply_to=defense
                    replace=yes
		    [defense]
			mountains=$ensnaredUnitDefense.defense.mountains
			hills=$ensnaredUnitDefense.defense.hills
			deep_water=$ensnaredUnitDefense.defense.deep_water
        		shallow_water=$ensnaredUnitDefense.defense.shallow_water
        		swamp_water=$ensnaredUnitDefense.defense.swamp_water
        		reef=$ensnaredUnitDefense.defense.reef
        		flat=$ensnaredUnitDefense.defense.flat
        		sand=$ensnaredUnitDefense.defense.sand
        		forest=$ensnaredUnitDefense.defense.forest
        		village=$ensnaredUnitDefense.defense.village
        		castle=$ensnaredUnitDefense.defense.castle
        		cave=$ensnaredUnitDefense.defense.cave
        		frozen=$ensnaredUnitDefense.defense.frozen
        		unwalkable=$ensnaredUnitDefense.defense.unwalkable
        		fungus=$ensnaredUnitDefense.defense.fungus
		    [/defense]
                [/effect]

		#once its gotten that it can unstore that unit
        	[unstore_unit]
        	    variable=ensnaredUnitDefense[$i]
        	[/unstore_unit]
            [/object]

        {NEXT i}

	# once its done that its gone through all the ensnared units and fixed them so we now clear that variable
	{CLEAR_VARIABLE ensnared}

    [/event]
[+attack]
[+specials]
#enddef

#define SPECIAL_NOTES_TRAMPLE
    _"If this unit attacks with the trample special it gains 1 extra strike and if the defender is killed it will move into their hex."#enddef

#define WEAPON_SPECIAL_ROL_TRAMPLE
    [attacks]
   	id=ROLweapon_special_trample
   	name= _ "trample"
        description= _ "On offense units with trample will gain an extra strike and if they kill they will move into the hex of the unit they killed."
        apply_to=self
        active_on=offense
        add=1
    [/attacks]
[/specials]
[/attack]

[event]
     name=attacker hits
     first_time_only=no
     [filter_attack]
          special=ROLweapon_special_trample
     [/filter_attack]
     [if]
        [not]
          [have_unit]
               x,y=$x2,$y2
          [/have_unit]
        [/not]
        [then]
           [set_variable]
              name=experience_earned
              value=8
           [/set_variable]
           [if]
              [variable]
                 name=second_unit.level
                 not_equals=0
              [/variable]
              [then]
                 [set_variable]
                    name=experience_earned
                    multiply=$second_unit.level
                 [/set_variable]
              [/then]
              [else]
                 [set_variable]
                    name=experience_earned
                    value=4
                 [/set_variable]
              [/else]
           [/if]
           [kill]
               x,y=$x2,$y2
               fire_event=yes
               [secondary_unit]
                   x,y=$x1,$y1
               [/secondary_unit]
           [/kill]
           [store_unit]
               [filter]
                   x,y=$x1,$y1
               [/filter]
               kill=yes
               variable=trampler
           [/store_unit]
           {VARIABLE_OP trampler.experience add $experience_earned}
           [unstore_unit]
                 variable=trampler
                 x,y=$x2,$y2
           [/unstore_unit]
           [capture_village]
                 x,y=$x2,$y2
                 side=$trampler.side
           [/capture_village]
           {CLEAR_VARIABLE experience_earned}
        [/then]
     [/if]
[/event]
[+attack]
[+specials]
#enddef
#define WEAPON_SPECIAL_CLUMSY
    [chance_to_hit]
        id=clumsy
        name= _ "clumsy"
        description= _ "This attack has a -10% chance to hit."
        add=-10
        cumulative=yes
    [/chance_to_hit]
#enddef
