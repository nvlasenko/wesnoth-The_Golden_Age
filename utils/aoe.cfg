#textdomain wesnoth

# Learn 'da lingo': 'subchain' = the smaller attacks that target those around the initial unit

# Rules for the chain attack:
# Defender gets hit for full damage
# Ring around defender (all units but attacker) get half damage
# Second ring gets quarter damage
# Continues until the damage drops below 1
# After damage is calculated, each unit corrects for resistance
# If a unit dies from subchain damage, the attacker gets half the xp
# The attacker DOES NOT get xp for merely hitting the subchain units

# TODO:
# Add anim?
# Would be great to copy the original attack's anim and repeat it through each unit.
# Probably prohibitively complicated.

# Where the real work is done. Has options to select various macros and such.
# {DAMAGE} should be $damage_inflicted unless you have a good reason for changing it.
# {UNIT} is the variable containing the recipient of a chain/subchain attack.
# {FILTER} is a filter for units that are not affected by the subchain attack. For instance,
# you could say 'type=Ghost' to protect Ghosts from the subchain attack
# {DAM_TYPE} is the type of damage (e.g. fire); used for calculating resistance. NOTE: if you
# want to use this special with a non-mainline damage type, you have to modify the event code
# (see below).
# {ATTACKER} is the variable used to store the attacking unit. Used to grant them xp for a
# subchain kill and to protect them from subchain damage.
#define CHAIN_UTIL DAMAGE UNIT FILTER DAM_TYPE ATTACKER
    {CLEAR_VARIABLE temp_damage_dealt}
    [set_variable]
	name=temp_damage_dealt
	value={DAMAGE}
    [/set_variable]
    [set_variable]
	name={ATTACKER}.variables.chained
	value=yes
    [/set_variable]
    [unstore_unit]
	variable={ATTACKER}
	find_vacant=no
    [/unstore_unit]
    [set_variable]
	name={UNIT}.variables.chained
	value=yes
    [/set_variable]
    [unstore_unit]
	variable={UNIT}
	find_vacant=no
    [/unstore_unit]
    {CLEAR_VARIABLE new_recipients}
    [store_unit]
	[filter]
	    [filter_location]
		x,y=${UNIT}.x,${UNIT}.y
		radius=1
	    [/filter_location]
[not]
    side=${ATTACKER}.side
[/not]
	    [and]
		[not]
		    x,y=${UNIT}.x,${UNIT}.y
		[/not]
	    [/and]
	[/filter]
	variable=new_recipients
	kill=no
    [/store_unit]
    [set_variable]
	name=temp_damage_dealt
	multiply=0.5
    [/set_variable]
    [while]
	[variable]
	    name=temp_damage_dealt
	    greater_than_equal_to=1
	[/variable]
	[do]
	    {CLEAR_VARIABLE temp_new_recipients}
	    {FOREACH new_recipients i}
		{CLEAR_VARIABLE temp_unit}
		[store_unit]
		    [filter]
			id=$new_recipients[$i].id
		    [/filter]
		    variable=temp_unit
		    kill=no
		[/store_unit]
		[if]
		    [variable]
			name=temp_unit.variables.chained
			equals=yes
		    [/variable]
		    [else]
			[set_variable]
			    name=temp_unit.variables.chained
			    value=yes
			[/set_variable]
			[set_variable]
			    name=real_damage_dealt
			    value=$temp_damage_dealt
			[/set_variable]
			[set_variable]
			    name=real_damage_dealt
			    multiply=$temp_unit.resistance.{DAM_TYPE}
			[/set_variable]
			[set_variable]
			    name=real_damage_dealt
			    multiply=0.01
			[/set_variable]
			[set_variable]
			    name=real_damage_dealt
			    round=floor
			[/set_variable]
			[if]
			    [variable]
				name=real_damage_dealt
				greater_than=0
			    [/variable]
			    [then]
				[set_variable]
				    name=temp_unit.hitpoints
				    add=-$real_damage_dealt
				[/set_variable]
				[unstore_unit]
				    variable=temp_unit
				    {COLOR_HARM}
				    text=_"$real_damage_dealt"
				    find_vacant=no
				[/unstore_unit]
			    [/then]
			    [else]
				[unstore_unit]
				    variable=temp_unit
				    red=255
				    blue=255
				    green=255
				    text=_"0"
				    find_vacant=no
				[/unstore_unit]
			    [/else]
			[/if]
			[if]
			    [variable]
				name=temp_unit.hitpoints
				less_than=1
			    [/variable]
			    [then]
				[kill]
				    id=$temp_unit.id
				    animate=yes
				    fire_event=yes
				[/kill]
				[set_variable]
				    name=xp_gained
				    value=8
				[/set_variable]
				[set_variable]
				    name=xp_gained
				    multiply=$temp_unit.level
				[/set_variable]
				[if]
				    [variable]
					name=xp_gained
					less_than=1
				    [/variable]
				    [then]
					[set_variable]
					    name=xp_gained
					    value=4
					[/set_variable]
				    [/then]
				[/if]
				[set_variable]
				    name={ATTACKER}.experience
				    add=$xp_gained
				[/set_variable]
				[unstore_unit]
				    variable={ATTACKER}
				    find_vacant=no
				[/unstore_unit]
			    [/then]
			[/if]
			[store_unit]
			    [filter]
				[filter_location]
				    x,y=$temp_unit.x,$temp_unit.y
				    radius=1
				[/filter_location]
[not]
    side=$unit.side
[/not]
#				{FILTER}
				[and]
				    [not]
					x,y=$temp_unit.x,$temp_unit.y
				    [/not]
				[/and]
			    [/filter]
			    variable=temp_new_recipients
			    mode=append
			    kill=no
			[/store_unit]
		    [/else]
		[/if]
	    {NEXT i}
	    [set_variables]
		name=new_recipients
		to_variable=temp_new_recipients
		mode=replace
	    [/set_variables]
	    {CLEAR_VARIABLE temp_new_recipients}
	    [set_variable]
		name=temp_damage_dealt
		multiply=0.5
	    [/set_variable]
	[/do]
    [/while]
    {CLEAR_VARIABLE new_recipients}
    {CLEAR_VARIABLE temp_damage_dealt}
    [store_unit]
	[filter]
	[/filter]
	variable=temp_unchain_units
    [/store_unit]
    {FOREACH temp_unchain_units i}
	[if]
	    [variable]
		name=temp_unchain_units[$i].variables.chained
		equals=yes
	    [/variable]
	    [then]
		[set_variable]
		    name=temp_unchain_units[$i].variables.chained
		    value=no
		[/set_variable]
	    [/then]
	[/if]
	[unstore_unit]
	    variable=temp_unchain_units[$i]
	    find_vacant=no
	[/unstore_unit]
    {NEXT i}
    {CLEAR_VARIABLE temp_unchain_units}
#enddef

# This is a basic template. There should be one of these for each damage type.
# NOTE: If you want to use this special with a non-mainline damage type, you have to add your
# damage type to the main macro (see below).
#define CHAIN_EVENT_TEMPLATE FILTER DAM_TYPE
    [event]
	name=attacker_hits
	first_time_only=no
	id=chain_attack_hits_with_{DAM_TYPE}
	[filter_attack]
	    type={DAM_TYPE}
	    special=splash
	[/filter_attack]
	[filter_second]
[not]
    side=$unit.side
[/not]
	[/filter_second]
	{CHAIN_UTIL $damage_inflicted second_unit {FILTER} {DAM_TYPE} unit}
    [/event]
    [event]
	name=defender_hits
	first_time_only=no
	id=chain_defense_hits_with_{DAM_TYPE}
	[filter_second_attack]
	    type={DAM_TYPE}
	    special=splash
	[/filter_second_attack]
	[filter]
[not]
    side=$unit.side
[/not]
	[/filter]
	{CHAIN_UTIL $damage_inflicted unit {FILTER} {DAM_TYPE} second_unit}
    [/event]
#enddef

# The {FILTER} can be anything. Only units passing the filter will be hit. I recommend using
# with a pair of [not] tags, as in this example:
#[not]
#    type=Ghost,Wraith,Spectre,Shadow,Nightgaunt
#[/not]
# That will make all Spirit Undead exempt from the chain - the damage will not even pass to
# units around them.
# wmllint: unbalanced-on
#define WEAPON_SPECIAL_SPLASH FILTER
	# wmlxgettext: [attack]
	# wmlxgettext: [specials]
	[dummy]
	    id=splash
	    name=_"splash"
	    description=_"Upon a hit, this unit’s attack will branch out and strike adjacent enemies (rippling through enemy ranks) for half the damage. This is repeated until the damage drops below 1 damage point."
	[/dummy]
    [/specials]
[/attack]
{CHAIN_EVENT_TEMPLATE {FILTER} blade}
{CHAIN_EVENT_TEMPLATE {FILTER} pierce}
{CHAIN_EVENT_TEMPLATE {FILTER} impact}
{CHAIN_EVENT_TEMPLATE {FILTER} fire}
{CHAIN_EVENT_TEMPLATE {FILTER} cold}
{CHAIN_EVENT_TEMPLATE {FILTER} arcane}
# If you want to use a non-mainline damage type with this special, add another event template
# to this list with the new damage type.
# Example to add 'squishy' damage type:
# {CHAIN_EVENT_TEMPLATE {FILTER} squishy}
[+attack]
[+specials]
# wmlxgettext: [/specials]
# wmlxgettext: [/attack]
#enddef
# wmllint: unbalanced-off
#define SPECIAL_NOTES_SPLASH
_"Upon a hit, this unit’s attack will branch out and strike adjacent enemies (rippling through enemy ranks) for half the damage. This is repeated until the damage drops below 1 damage point."#enddef

